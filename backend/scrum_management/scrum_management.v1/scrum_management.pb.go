// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0-devel
// 	protoc        v4.25.3
// source: scrum_management.proto

package server

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CardCategory int32

const (
	CardCategory_UNKNOWN_C CardCategory = 0
	CardCategory_Roadmap   CardCategory = 1
	CardCategory_Proyectos CardCategory = 2
)

// Enum value maps for CardCategory.
var (
	CardCategory_name = map[int32]string{
		0: "UNKNOWN_C",
		1: "Roadmap",
		2: "Proyectos",
	}
	CardCategory_value = map[string]int32{
		"UNKNOWN_C": 0,
		"Roadmap":   1,
		"Proyectos": 2,
	}
)

func (x CardCategory) Enum() *CardCategory {
	p := new(CardCategory)
	*p = x
	return p
}

func (x CardCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_scrum_management_proto_enumTypes[0].Descriptor()
}

func (CardCategory) Type() protoreflect.EnumType {
	return &file_scrum_management_proto_enumTypes[0]
}

func (x CardCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardCategory.Descriptor instead.
func (CardCategory) EnumDescriptor() ([]byte, []int) {
	return file_scrum_management_proto_rawDescGZIP(), []int{0}
}

type CardPriority int32

const (
	CardPriority_UNKNOWN_P CardPriority = 0
	CardPriority_Alta      CardPriority = 1
	CardPriority_Media     CardPriority = 2
	CardPriority_Baja      CardPriority = 3
)

// Enum value maps for CardPriority.
var (
	CardPriority_name = map[int32]string{
		0: "UNKNOWN_P",
		1: "Alta",
		2: "Media",
		3: "Baja",
	}
	CardPriority_value = map[string]int32{
		"UNKNOWN_P": 0,
		"Alta":      1,
		"Media":     2,
		"Baja":      3,
	}
)

func (x CardPriority) Enum() *CardPriority {
	p := new(CardPriority)
	*p = x
	return p
}

func (x CardPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_scrum_management_proto_enumTypes[1].Descriptor()
}

func (CardPriority) Type() protoreflect.EnumType {
	return &file_scrum_management_proto_enumTypes[1]
}

func (x CardPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardPriority.Descriptor instead.
func (CardPriority) EnumDescriptor() ([]byte, []int) {
	return file_scrum_management_proto_rawDescGZIP(), []int{1}
}

type CardState int32

const (
	CardState_UNKNOWN_S CardState = 0
	CardState_Pendiente CardState = 1
	CardState_Proceso   CardState = 2
	CardState_Revisar   CardState = 3
	CardState_Listo     CardState = 4
)

// Enum value maps for CardState.
var (
	CardState_name = map[int32]string{
		0: "UNKNOWN_S",
		1: "Pendiente",
		2: "Proceso",
		3: "Revisar",
		4: "Listo",
	}
	CardState_value = map[string]int32{
		"UNKNOWN_S": 0,
		"Pendiente": 1,
		"Proceso":   2,
		"Revisar":   3,
		"Listo":     4,
	}
)

func (x CardState) Enum() *CardState {
	p := new(CardState)
	*p = x
	return p
}

func (x CardState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardState) Descriptor() protoreflect.EnumDescriptor {
	return file_scrum_management_proto_enumTypes[2].Descriptor()
}

func (CardState) Type() protoreflect.EnumType {
	return &file_scrum_management_proto_enumTypes[2]
}

func (x CardState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardState.Descriptor instead.
func (CardState) EnumDescriptor() ([]byte, []int) {
	return file_scrum_management_proto_rawDescGZIP(), []int{2}
}

type CardType int32

const (
	CardType_UNKNOWN_T CardType = 0
	CardType_Tarea     CardType = 1
	CardType_Historia  CardType = 2
	CardType_Error     CardType = 3
)

// Enum value maps for CardType.
var (
	CardType_name = map[int32]string{
		0: "UNKNOWN_T",
		1: "Tarea",
		2: "Historia",
		3: "Error",
	}
	CardType_value = map[string]int32{
		"UNKNOWN_T": 0,
		"Tarea":     1,
		"Historia":  2,
		"Error":     3,
	}
)

func (x CardType) Enum() *CardType {
	p := new(CardType)
	*p = x
	return p
}

func (x CardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardType) Descriptor() protoreflect.EnumDescriptor {
	return file_scrum_management_proto_enumTypes[3].Descriptor()
}

func (CardType) Type() protoreflect.EnumType {
	return &file_scrum_management_proto_enumTypes[3]
}

func (x CardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardType.Descriptor instead.
func (CardType) EnumDescriptor() ([]byte, []int) {
	return file_scrum_management_proto_rawDescGZIP(), []int{3}
}

type CardBacklog int32

const (
	CardBacklog_UNKNOWN_B CardBacklog = 0
	CardBacklog_True      CardBacklog = 1
	CardBacklog_False     CardBacklog = 2
)

// Enum value maps for CardBacklog.
var (
	CardBacklog_name = map[int32]string{
		0: "UNKNOWN_B",
		1: "True",
		2: "False",
	}
	CardBacklog_value = map[string]int32{
		"UNKNOWN_B": 0,
		"True":      1,
		"False":     2,
	}
)

func (x CardBacklog) Enum() *CardBacklog {
	p := new(CardBacklog)
	*p = x
	return p
}

func (x CardBacklog) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardBacklog) Descriptor() protoreflect.EnumDescriptor {
	return file_scrum_management_proto_enumTypes[4].Descriptor()
}

func (CardBacklog) Type() protoreflect.EnumType {
	return &file_scrum_management_proto_enumTypes[4]
}

func (x CardBacklog) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardBacklog.Descriptor instead.
func (CardBacklog) EnumDescriptor() ([]byte, []int) {
	return file_scrum_management_proto_rawDescGZIP(), []int{4}
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Epic        string       `protobuf:"bytes,3,opt,name=epic,proto3" json:"epic,omitempty"`
	IdUser      uint64       `protobuf:"varint,4,opt,name=id_user,json=idUser,proto3" json:"id_user,omitempty"`
	Category    CardCategory `protobuf:"varint,5,opt,name=category,proto3,enum=CardCategory" json:"category,omitempty"`
	Datecreated string       `protobuf:"bytes,6,opt,name=datecreated,proto3" json:"datecreated,omitempty"`
	Description string       `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Priority    CardPriority `protobuf:"varint,8,opt,name=priority,proto3,enum=CardPriority" json:"priority,omitempty"`
	State       CardState    `protobuf:"varint,9,opt,name=state,proto3,enum=CardState" json:"state,omitempty"`
	Storypoints float64      `protobuf:"fixed64,10,opt,name=storypoints,proto3" json:"storypoints,omitempty"`
	Type        CardType     `protobuf:"varint,11,opt,name=type,proto3,enum=CardType" json:"type,omitempty"`
	Backlog     CardBacklog  `protobuf:"varint,12,opt,name=backlog,proto3,enum=CardBacklog" json:"backlog,omitempty"`
	Labels      []*Label     `protobuf:"bytes,13,rep,name=labels,proto3" json:"labels,omitempty"`
	Comments    []*Comment   `protobuf:"bytes,14,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrum_management_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_scrum_management_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_scrum_management_proto_rawDescGZIP(), []int{0}
}

func (x *Card) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Card) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Card) GetEpic() string {
	if x != nil {
		return x.Epic
	}
	return ""
}

func (x *Card) GetIdUser() uint64 {
	if x != nil {
		return x.IdUser
	}
	return 0
}

func (x *Card) GetCategory() CardCategory {
	if x != nil {
		return x.Category
	}
	return CardCategory_UNKNOWN_C
}

func (x *Card) GetDatecreated() string {
	if x != nil {
		return x.Datecreated
	}
	return ""
}

func (x *Card) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Card) GetPriority() CardPriority {
	if x != nil {
		return x.Priority
	}
	return CardPriority_UNKNOWN_P
}

func (x *Card) GetState() CardState {
	if x != nil {
		return x.State
	}
	return CardState_UNKNOWN_S
}

func (x *Card) GetStorypoints() float64 {
	if x != nil {
		return x.Storypoints
	}
	return 0
}

func (x *Card) GetType() CardType {
	if x != nil {
		return x.Type
	}
	return CardType_UNKNOWN_T
}

func (x *Card) GetBacklog() CardBacklog {
	if x != nil {
		return x.Backlog
	}
	return CardBacklog_UNKNOWN_B
}

func (x *Card) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Card) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrum_management_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_scrum_management_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_scrum_management_proto_rawDescGZIP(), []int{1}
}

func (x *Label) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Label) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IdCard  uint64 `protobuf:"varint,2,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`
	IdUser  uint64 `protobuf:"varint,3,opt,name=id_user,json=idUser,proto3" json:"id_user,omitempty"`
	Date    string `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Parent  uint64 `protobuf:"varint,6,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrum_management_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_scrum_management_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_scrum_management_proto_rawDescGZIP(), []int{2}
}

func (x *Comment) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Comment) GetIdCard() uint64 {
	if x != nil {
		return x.IdCard
	}
	return 0
}

func (x *Comment) GetIdUser() uint64 {
	if x != nil {
		return x.IdUser
	}
	return 0
}

func (x *Comment) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetParent() uint64 {
	if x != nil {
		return x.Parent
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email   string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Token   string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	IsAdmin bool   `protobuf:"varint,5,opt,name=isAdmin,proto3" json:"isAdmin,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrum_management_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_scrum_management_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_scrum_management_proto_rawDescGZIP(), []int{3}
}

func (x *User) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *User) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

type AddUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *AddUserRequest) Reset() {
	*x = AddUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrum_management_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserRequest) ProtoMessage() {}

func (x *AddUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scrum_management_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserRequest.ProtoReflect.Descriptor instead.
func (*AddUserRequest) Descriptor() ([]byte, []int) {
	return file_scrum_management_proto_rawDescGZIP(), []int{4}
}

func (x *AddUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type AddUserResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InsertedEmail bool `protobuf:"varint,1,opt,name=insertedEmail,proto3" json:"insertedEmail,omitempty"`
}

func (x *AddUserResult) Reset() {
	*x = AddUserResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrum_management_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserResult) ProtoMessage() {}

func (x *AddUserResult) ProtoReflect() protoreflect.Message {
	mi := &file_scrum_management_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserResult.ProtoReflect.Descriptor instead.
func (*AddUserResult) Descriptor() ([]byte, []int) {
	return file_scrum_management_proto_rawDescGZIP(), []int{5}
}

func (x *AddUserResult) GetInsertedEmail() bool {
	if x != nil {
		return x.InsertedEmail
	}
	return false
}

type GetCardsFiltered struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category CardCategory `protobuf:"varint,1,opt,name=category,proto3,enum=CardCategory" json:"category,omitempty"`
	Priority CardPriority `protobuf:"varint,2,opt,name=priority,proto3,enum=CardPriority" json:"priority,omitempty"`
	State    CardState    `protobuf:"varint,3,opt,name=state,proto3,enum=CardState" json:"state,omitempty"`
	Type     CardType     `protobuf:"varint,4,opt,name=type,proto3,enum=CardType" json:"type,omitempty"`
	Backlog  CardBacklog  `protobuf:"varint,5,opt,name=backlog,proto3,enum=CardBacklog" json:"backlog,omitempty"`
}

func (x *GetCardsFiltered) Reset() {
	*x = GetCardsFiltered{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrum_management_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCardsFiltered) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardsFiltered) ProtoMessage() {}

func (x *GetCardsFiltered) ProtoReflect() protoreflect.Message {
	mi := &file_scrum_management_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardsFiltered.ProtoReflect.Descriptor instead.
func (*GetCardsFiltered) Descriptor() ([]byte, []int) {
	return file_scrum_management_proto_rawDescGZIP(), []int{6}
}

func (x *GetCardsFiltered) GetCategory() CardCategory {
	if x != nil {
		return x.Category
	}
	return CardCategory_UNKNOWN_C
}

func (x *GetCardsFiltered) GetPriority() CardPriority {
	if x != nil {
		return x.Priority
	}
	return CardPriority_UNKNOWN_P
}

func (x *GetCardsFiltered) GetState() CardState {
	if x != nil {
		return x.State
	}
	return CardState_UNKNOWN_S
}

func (x *GetCardsFiltered) GetType() CardType {
	if x != nil {
		return x.Type
	}
	return CardType_UNKNOWN_T
}

func (x *GetCardsFiltered) GetBacklog() CardBacklog {
	if x != nil {
		return x.Backlog
	}
	return CardBacklog_UNKNOWN_B
}

type CardsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []*Card `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
}

func (x *CardsList) Reset() {
	*x = CardsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrum_management_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardsList) ProtoMessage() {}

func (x *CardsList) ProtoReflect() protoreflect.Message {
	mi := &file_scrum_management_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardsList.ProtoReflect.Descriptor instead.
func (*CardsList) Descriptor() ([]byte, []int) {
	return file_scrum_management_proto_rawDescGZIP(), []int{7}
}

func (x *CardsList) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

type AddCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card *Card `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *AddCardRequest) Reset() {
	*x = AddCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrum_management_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCardRequest) ProtoMessage() {}

func (x *AddCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scrum_management_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCardRequest.ProtoReflect.Descriptor instead.
func (*AddCardRequest) Descriptor() ([]byte, []int) {
	return file_scrum_management_proto_rawDescGZIP(), []int{8}
}

func (x *AddCardRequest) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type AddCardResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InsertedCard bool `protobuf:"varint,1,opt,name=insertedCard,proto3" json:"insertedCard,omitempty"`
}

func (x *AddCardResult) Reset() {
	*x = AddCardResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrum_management_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCardResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCardResult) ProtoMessage() {}

func (x *AddCardResult) ProtoReflect() protoreflect.Message {
	mi := &file_scrum_management_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCardResult.ProtoReflect.Descriptor instead.
func (*AddCardResult) Descriptor() ([]byte, []int) {
	return file_scrum_management_proto_rawDescGZIP(), []int{9}
}

func (x *AddCardResult) GetInsertedCard() bool {
	if x != nil {
		return x.InsertedCard
	}
	return false
}

type DeleteCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdCard uint64 `protobuf:"varint,1,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`
}

func (x *DeleteCardRequest) Reset() {
	*x = DeleteCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrum_management_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCardRequest) ProtoMessage() {}

func (x *DeleteCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scrum_management_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCardRequest.ProtoReflect.Descriptor instead.
func (*DeleteCardRequest) Descriptor() ([]byte, []int) {
	return file_scrum_management_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteCardRequest) GetIdCard() uint64 {
	if x != nil {
		return x.IdCard
	}
	return 0
}

type DeleteCardResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletedCard bool `protobuf:"varint,1,opt,name=deletedCard,proto3" json:"deletedCard,omitempty"`
}

func (x *DeleteCardResult) Reset() {
	*x = DeleteCardResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrum_management_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCardResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCardResult) ProtoMessage() {}

func (x *DeleteCardResult) ProtoReflect() protoreflect.Message {
	mi := &file_scrum_management_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCardResult.ProtoReflect.Descriptor instead.
func (*DeleteCardResult) Descriptor() ([]byte, []int) {
	return file_scrum_management_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteCardResult) GetDeletedCard() bool {
	if x != nil {
		return x.DeletedCard
	}
	return false
}

type UpdateCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card *Card `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *UpdateCardRequest) Reset() {
	*x = UpdateCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrum_management_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCardRequest) ProtoMessage() {}

func (x *UpdateCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scrum_management_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCardRequest.ProtoReflect.Descriptor instead.
func (*UpdateCardRequest) Descriptor() ([]byte, []int) {
	return file_scrum_management_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateCardRequest) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type UpdateCardResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedCard bool `protobuf:"varint,1,opt,name=updatedCard,proto3" json:"updatedCard,omitempty"`
}

func (x *UpdateCardResult) Reset() {
	*x = UpdateCardResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrum_management_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCardResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCardResult) ProtoMessage() {}

func (x *UpdateCardResult) ProtoReflect() protoreflect.Message {
	mi := &file_scrum_management_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCardResult.ProtoReflect.Descriptor instead.
func (*UpdateCardResult) Descriptor() ([]byte, []int) {
	return file_scrum_management_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateCardResult) GetUpdatedCard() bool {
	if x != nil {
		return x.UpdatedCard
	}
	return false
}

var File_scrum_management_proto protoreflect.FileDescriptor

var file_scrum_management_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x63, 0x72, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x03, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x70, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x52, 0x07,
	0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x12, 0x1e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x2b, 0x0a,
	0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x69, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x70,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x22, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x35, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22,
	0xd1, 0x01, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x29, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x62,
	0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b,
	0x6c, 0x6f, 0x67, 0x22, 0x28, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x2b, 0x0a,
	0x0e, 0x41, 0x64, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x33, 0x0a, 0x0d, 0x41, 0x64,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x22,
	0x2c, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x22, 0x34, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x22, 0x2e, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63,
	0x61, 0x72, 0x64, 0x22, 0x34, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x2a, 0x39, 0x0a, 0x0c, 0x43, 0x61, 0x72,
	0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x6f, 0x61, 0x64,
	0x6d, 0x61, 0x70, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x79, 0x65, 0x63, 0x74,
	0x6f, 0x73, 0x10, 0x02, 0x2a, 0x3c, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x50, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x6c, 0x74, 0x61, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x61, 0x6a, 0x61,
	0x10, 0x03, 0x2a, 0x4e, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x6f, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x61, 0x72, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x69, 0x73, 0x74, 0x6f,
	0x10, 0x04, 0x2a, 0x3d, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x61, 0x72, 0x65, 0x61, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x03, 0x2a, 0x31, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x42, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x72, 0x75, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x61, 0x6c,
	0x73, 0x65, 0x10, 0x02, 0x32, 0x8d, 0x03, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x47, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x61, 0x64, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x61, 0x64,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x61, 0x64, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x11, 0x2e, 0x67, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x1a, 0x0a, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x47, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0f, 0x2e, 0x41,
	0x64, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x41, 0x64, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x12, 0x53, 0x0a, 0x0a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x12, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x12,
	0x53, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x12, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22,
	0x13, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x42, 0x14, 0x5a, 0x12, 0x2e, 0x2e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_scrum_management_proto_rawDescOnce sync.Once
	file_scrum_management_proto_rawDescData = file_scrum_management_proto_rawDesc
)

func file_scrum_management_proto_rawDescGZIP() []byte {
	file_scrum_management_proto_rawDescOnce.Do(func() {
		file_scrum_management_proto_rawDescData = protoimpl.X.CompressGZIP(file_scrum_management_proto_rawDescData)
	})
	return file_scrum_management_proto_rawDescData
}

var file_scrum_management_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_scrum_management_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_scrum_management_proto_goTypes = []interface{}{
	(CardCategory)(0),         // 0: CardCategory
	(CardPriority)(0),         // 1: CardPriority
	(CardState)(0),            // 2: CardState
	(CardType)(0),             // 3: CardType
	(CardBacklog)(0),          // 4: CardBacklog
	(*Card)(nil),              // 5: Card
	(*Label)(nil),             // 6: Label
	(*Comment)(nil),           // 7: Comment
	(*User)(nil),              // 8: User
	(*AddUserRequest)(nil),    // 9: addUserRequest
	(*AddUserResult)(nil),     // 10: addUserResult
	(*GetCardsFiltered)(nil),  // 11: getCardsFiltered
	(*CardsList)(nil),         // 12: CardsList
	(*AddCardRequest)(nil),    // 13: AddCardRequest
	(*AddCardResult)(nil),     // 14: AddCardResult
	(*DeleteCardRequest)(nil), // 15: DeleteCardRequest
	(*DeleteCardResult)(nil),  // 16: DeleteCardResult
	(*UpdateCardRequest)(nil), // 17: UpdateCardRequest
	(*UpdateCardResult)(nil),  // 18: UpdateCardResult
}
var file_scrum_management_proto_depIdxs = []int32{
	0,  // 0: Card.category:type_name -> CardCategory
	1,  // 1: Card.priority:type_name -> CardPriority
	2,  // 2: Card.state:type_name -> CardState
	3,  // 3: Card.type:type_name -> CardType
	4,  // 4: Card.backlog:type_name -> CardBacklog
	6,  // 5: Card.labels:type_name -> Label
	7,  // 6: Card.comments:type_name -> Comment
	0,  // 7: getCardsFiltered.category:type_name -> CardCategory
	1,  // 8: getCardsFiltered.priority:type_name -> CardPriority
	2,  // 9: getCardsFiltered.state:type_name -> CardState
	3,  // 10: getCardsFiltered.type:type_name -> CardType
	4,  // 11: getCardsFiltered.backlog:type_name -> CardBacklog
	5,  // 12: CardsList.cards:type_name -> Card
	5,  // 13: AddCardRequest.card:type_name -> Card
	5,  // 14: UpdateCardRequest.card:type_name -> Card
	9,  // 15: Server.AddUser:input_type -> addUserRequest
	11, // 16: Server.GetCards:input_type -> getCardsFiltered
	13, // 17: Server.AddCard:input_type -> AddCardRequest
	15, // 18: Server.DeleteCard:input_type -> DeleteCardRequest
	17, // 19: Server.UpdateCard:input_type -> UpdateCardRequest
	10, // 20: Server.AddUser:output_type -> addUserResult
	12, // 21: Server.GetCards:output_type -> CardsList
	14, // 22: Server.AddCard:output_type -> AddCardResult
	16, // 23: Server.DeleteCard:output_type -> DeleteCardResult
	18, // 24: Server.UpdateCard:output_type -> UpdateCardResult
	20, // [20:25] is the sub-list for method output_type
	15, // [15:20] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_scrum_management_proto_init() }
func file_scrum_management_proto_init() {
	if File_scrum_management_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scrum_management_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrum_management_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrum_management_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrum_management_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrum_management_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrum_management_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrum_management_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCardsFiltered); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrum_management_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrum_management_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrum_management_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCardResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrum_management_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrum_management_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCardResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrum_management_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrum_management_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCardResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scrum_management_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scrum_management_proto_goTypes,
		DependencyIndexes: file_scrum_management_proto_depIdxs,
		EnumInfos:         file_scrum_management_proto_enumTypes,
		MessageInfos:      file_scrum_management_proto_msgTypes,
	}.Build()
	File_scrum_management_proto = out.File
	file_scrum_management_proto_rawDesc = nil
	file_scrum_management_proto_goTypes = nil
	file_scrum_management_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerClient interface {
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResult, error)
	GetCards(ctx context.Context, in *GetCardsFiltered, opts ...grpc.CallOption) (*CardsList, error)
	AddCard(ctx context.Context, in *AddCardRequest, opts ...grpc.CallOption) (*AddCardResult, error)
	DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*DeleteCardResult, error)
	UpdateCard(ctx context.Context, in *UpdateCardRequest, opts ...grpc.CallOption) (*UpdateCardResult, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResult, error) {
	out := new(AddUserResult)
	err := c.cc.Invoke(ctx, "/Server/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetCards(ctx context.Context, in *GetCardsFiltered, opts ...grpc.CallOption) (*CardsList, error) {
	out := new(CardsList)
	err := c.cc.Invoke(ctx, "/Server/GetCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) AddCard(ctx context.Context, in *AddCardRequest, opts ...grpc.CallOption) (*AddCardResult, error) {
	out := new(AddCardResult)
	err := c.cc.Invoke(ctx, "/Server/AddCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*DeleteCardResult, error) {
	out := new(DeleteCardResult)
	err := c.cc.Invoke(ctx, "/Server/DeleteCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) UpdateCard(ctx context.Context, in *UpdateCardRequest, opts ...grpc.CallOption) (*UpdateCardResult, error) {
	out := new(UpdateCardResult)
	err := c.cc.Invoke(ctx, "/Server/UpdateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
type ServerServer interface {
	AddUser(context.Context, *AddUserRequest) (*AddUserResult, error)
	GetCards(context.Context, *GetCardsFiltered) (*CardsList, error)
	AddCard(context.Context, *AddCardRequest) (*AddCardResult, error)
	DeleteCard(context.Context, *DeleteCardRequest) (*DeleteCardResult, error)
	UpdateCard(context.Context, *UpdateCardRequest) (*UpdateCardResult, error)
}

// UnimplementedServerServer can be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (*UnimplementedServerServer) AddUser(context.Context, *AddUserRequest) (*AddUserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedServerServer) GetCards(context.Context, *GetCardsFiltered) (*CardsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCards not implemented")
}
func (*UnimplementedServerServer) AddCard(context.Context, *AddCardRequest) (*AddCardResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCard not implemented")
}
func (*UnimplementedServerServer) DeleteCard(context.Context, *DeleteCardRequest) (*DeleteCardResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}
func (*UnimplementedServerServer) UpdateCard(context.Context, *UpdateCardRequest) (*UpdateCardResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCard not implemented")
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardsFiltered)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/GetCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetCards(ctx, req.(*GetCardsFiltered))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_AddCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).AddCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/AddCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).AddCard(ctx, req.(*AddCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/DeleteCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).DeleteCard(ctx, req.(*DeleteCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_UpdateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).UpdateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/UpdateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).UpdateCard(ctx, req.(*UpdateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _Server_AddUser_Handler,
		},
		{
			MethodName: "GetCards",
			Handler:    _Server_GetCards_Handler,
		},
		{
			MethodName: "AddCard",
			Handler:    _Server_AddCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _Server_DeleteCard_Handler,
		},
		{
			MethodName: "UpdateCard",
			Handler:    _Server_UpdateCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scrum_management.proto",
}
